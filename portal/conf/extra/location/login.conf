
location = /login {
    default_type text/html;
    
    # 以下是 OpenResty 执行阶段顺序，如果配置顺序调换，执行顺序也不会改变

    # 1.流程分支处理判断变量初始化
    # context: server, server if, location, location if
    set_by_lua_block $a {
        ngx.log(ngx.ERR, "set_by_lua_block")
    }

    # 2.转发、重定向、缓存等功能(例如特定请求代理到外网)
    # context: http, server, location, location if
    rewrite_by_lua_block {
        ngx.log(ngx.ERR, "rewrite_by_lua_block")
    }

    # IP 准入、接口权限等情况集中处理(例如配合 iptable 完成简单防火墙)
    # context: http, server, location, location if
    access_by_lua_block {
        ngx.log(ngx.ERR, "access_by_lua_block")
    }

    # 内容生成
    # context: location, location if
    content_by_lua_file /web_server/portal/lua/api/login.lua;

    # 响应头部过滤处理(例如添加头部信息)
    # context: http, server, location, location if
    header_filter_by_lua_file /web_server/portal/lua/header_filter.lua;

    # 响应体过滤处理(例如完成应答内容统一成大写)
    # context: http, server, location, location if
    body_filter_by_lua_block {
        ngx.log(ngx.ERR, "body_filter_by_lua_block")
    }

    # 会话完成后本地异步完成日志记录(日志可以记录在本地，还可以同步到其他机器)
    # context: http, server, location, location if
    log_by_lua_block {
        ngx.log(ngx.ERR, "log_by_lua_block")
    }
}
