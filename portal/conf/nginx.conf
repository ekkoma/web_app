
worker_processes 4;
error_log /web_server/portal/logs/error.log;

events {
    worker_connections 1024;
    use epoll;
    # 解决惊群效应，请求到达时只有一个worker被唤醒，加锁开启？
    accept_mutex on;
    # 多个连接到达，worker以串行方式处理链接；吞吐量大时关闭此配置，多个worker以并行方式接受链接
    multi_accept on;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    # 日志格式，打印那些字段
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    # 关闭nginx版本展示
    server_tokens off;
    sendfile        on;
    keepalive_timeout  65;
    gzip  on;

    # lua缓存，默认开启,代码调试时关闭缓存不需要reload nginx，线上开启
    # 关闭时，每个request都会创建一个对立的lua虚拟机
    # in this special mode a standalone Lua VM is always created for each request.
    # lua_code_cache off;
    
    # nginx reload时会重新执行init_by_lua_file
    lua_shared_dict shared_pre_urls 10m;
    init_by_lua_file /web_server/portal/lua/init_config.lua;
    include /web_server/portal/conf/extra/*.conf;
    # uwsgi集群
    #upstream uwsgicluster {
    #    server 127.0.0.1:8000;
    #}
}
